databases:
  # Staging PostgreSQL Database
  - name: zipsea-postgres-staging
    databaseName: zipsea_staging_db
    user: zipsea_staging_user
    plan: basic-256mb
    region: oregon
    ipAllowList: []

  # Production PostgreSQL Database
  - name: zipsea-postgres-production
    databaseName: zipsea_production_db
    user: zipsea_production_user
    plan: basic-256mb
    region: oregon
    ipAllowList: []

services:
  # Staging Redis Cache
  - type: redis
    name: zipsea-redis-staging
    plan: standard
    region: oregon
    maxmemoryPolicy: noeviction
    ipAllowList: []

  # Production Redis Cache
  - type: redis
    name: zipsea-redis-production
    plan: standard
    region: oregon
    maxmemoryPolicy: noeviction
    ipAllowList: []

  # ===========================================
  # BACKEND SERVICES
  # ===========================================

  # Backend API - Staging Environment
  - type: web
    name: zipsea-backend-staging
    env: node
    region: oregon
    plan: starter
    branch: main # Deploy from main branch
    rootDir: backend # Only deploy when backend changes
    buildCommand: npm install && npm run build
    startCommand: npm start
    healthCheckPath: /health
    envVars:
      - key: NODE_ENV
        value: staging
      - key: PORT
        value: 10000
      - key: DATABASE_URL
        fromDatabase:
          name: zipsea-postgres-staging
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: zipsea-redis-staging
          property: connectionString
      - key: CORS_ORIGIN
        value: https://zipsea-frontend-staging.onrender.com
      - key: LOG_LEVEL
        value: info
      - key: RATE_LIMIT_WINDOW_MS
        value: 900000
      - key: RATE_LIMIT_MAX_REQUESTS
        value: 100
      - key: JWT_SECRET
        generateValue: true
      - key: WEBHOOK_SECRET
        generateValue: true
      # These will be added manually in Render Dashboard
      # - key: CLERK_PUBLISHABLE_KEY
      # - key: CLERK_SECRET_KEY
      # - key: SENTRY_DSN
      # - key: TRAVELTEK_FTP_HOST
      # - key: TRAVELTEK_FTP_USER
      # - key: TRAVELTEK_FTP_PASSWORD
    autoDeploy: true

  # Production Backend API
  - type: web
    name: zipsea-backend-production
    env: node
    region: oregon
    plan: standard
    branch: production # Deploy from production branch only
    rootDir: backend # Only deploy when backend changes
    buildCommand: npm install && npm run build
    startCommand: npm start
    healthCheckPath: /health
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      - key: DATABASE_URL
        fromDatabase:
          name: zipsea-postgres-production
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: zipsea-redis-production
          property: connectionString
      - key: CORS_ORIGIN
        value: https://zipsea-frontend-production.onrender.com
      - key: LOG_LEVEL
        value: warn
      - key: RATE_LIMIT_WINDOW_MS
        value: 900000
      - key: RATE_LIMIT_MAX_REQUESTS
        value: 200
      - key: JWT_SECRET
        generateValue: true
      - key: WEBHOOK_SECRET
        generateValue: true
      # These will be added manually in Render Dashboard
      # - key: CLERK_PUBLISHABLE_KEY
      # - key: CLERK_SECRET_KEY
      # - key: SENTRY_DSN
      # - key: TRAVELTEK_FTP_HOST
      # - key: TRAVELTEK_FTP_USER
      # - key: TRAVELTEK_FTP_PASSWORD
    autoDeploy: true # Auto-deploy when production branch updates

  # ===========================================
  # FRONTEND SERVICES (NEW)
  # ===========================================

  # Frontend - Staging Environment
  - type: web
    name: zipsea-frontend-staging
    env: node
    region: oregon
    plan: starter
    branch: main
    rootDir: frontend # Only deploy when frontend changes
    buildCommand: npm ci && npm run build
    startCommand: npm run start
    healthCheckPath: /
    envVars:
      - key: NODE_ENV
        value: staging
      - key: PORT
        value: 3000
      - key: NEXT_PUBLIC_API_URL
        value: https://zipsea-backend.onrender.com/api/v1
      - key: NEXT_PUBLIC_ENVIRONMENT
        value: staging
      - key: NEXT_PUBLIC_SITE_URL
        value: https://zipsea-frontend-staging.onrender.com
    autoDeploy: true

  # Frontend - Production Environment
  - type: web
    name: zipsea-frontend-production
    env: node
    region: oregon
    plan: starter
    branch: production
    rootDir: frontend # Only deploy when frontend changes
    buildCommand: npm ci && npm run build
    startCommand: npm run start
    healthCheckPath: /
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3000
      - key: NEXT_PUBLIC_API_URL
        value: https://zipsea-production.onrender.com/api/v1
      - key: NEXT_PUBLIC_ENVIRONMENT
        value: production
      - key: NEXT_PUBLIC_SITE_URL
        value: https://zipsea-frontend-production.onrender.com
    autoDeploy: true

  # ===========================================
  # CRON JOBS
  # ===========================================

  # Production to Staging Data Sync - Daily sync of cruise data
  - type: cron
    name: zipsea-cruise-data-sync
    runtime: node
    region: oregon
    plan: starter
    repo: https://github.com/heyitswin/zipsea.git
    branch: main
    rootDir: backend
    buildCommand: npm install && npm run build
    startCommand: node scripts/sync-production-to-staging.js
    schedule: "0 6 * * *" # Daily at 6 AM UTC (11 PM PST)
    envVars:
      - key: NODE_VERSION
        value: "18.17.0"
      - key: DATABASE_URL_STAGING
        fromDatabase:
          name: zipsea-postgres-staging
          property: connectionString
      - key: DATABASE_URL_PRODUCTION
        fromDatabase:
          name: zipsea-postgres-production
          property: connectionString

  # DEPRECATED: Price Sync Cron Jobs - No longer needed with optimized webhook processor
  # Webhook processing is now handled automatically by webhook-processor-optimized.service
  # These cron jobs can be removed from Render dashboard

  # # Price Sync Cron Job - Staging (Every 5 minutes) - DEPRECATED
  # - type: cron
  #   name: price-sync-staging
  #   env: node
  #   region: oregon
  #   plan: starter
  #   branch: main
  #   rootDir: backend
  #   buildCommand: npm ci && npm run build
  #   startCommand: node scripts/trigger-batch-sync.js
  #   schedule: "*/5 * * * *"  # Every 5 minutes
  #   envVars:
  #     - key: NODE_ENV
  #       value: staging
  #     - key: API_URL
  #       value: https://zipsea-backend.onrender.com
  #     - key: DATABASE_URL
  #       fromDatabase:
  #         name: zipsea-postgres-staging
  #         property: connectionString
  #     - key: REDIS_URL
  #       fromService:
  #         type: redis
  #         name: zipsea-redis-staging
  #         property: connectionString

  # # Price Sync Cron Job - Production (Every 5 minutes) - DEPRECATED
  # - type: cron
  #   name: price-sync-production
  #   env: node
  #   region: oregon
  #   plan: starter
  #   branch: production
  #   rootDir: backend
  #   buildCommand: npm ci && npm run build
  #   startCommand: node scripts/trigger-batch-sync.js
  #   schedule: "*/5 * * * *"  # Every 5 minutes
  #   envVars:
  #     - key: NODE_ENV
  #       value: production
  #     - key: API_URL
  #       value: https://zipsea-production.onrender.com
  #     - key: DATABASE_URL
  #       fromDatabase:
  #         name: zipsea-postgres-production
  #         property: connectionString
  #     - key: REDIS_URL
  #       fromService:
  #         type: redis
  #         name: zipsea-redis-production
  #         property: connectionString

  # Daily Full Sync - Commented out as webhooks handle all updates
  # Uncomment if you need a comprehensive sync safety net
  # - type: cron
  #   name: daily-sync-production
  #   env: node
  #   region: oregon
  #   plan: starter
  #   branch: production
  #   rootDir: backend
  #   buildCommand: npm ci && npm run build
  #   startCommand: SYNC_YEARS=2025,2026,2027 node scripts/sync-complete-data.js
  #   schedule: "0 7 * * *"  # 7 AM UTC = 2 AM EST
  #   envVars:
  #     - key: NODE_ENV
  #       value: production
  #     - key: DATABASE_URL
  #       fromDatabase:
  #         name: zipsea-postgres-production
  #         property: connectionString
  #     - key: REDIS_URL
  #       fromService:
  #         type: redis
  #         name: zipsea-redis-production
  #         property: connectionString
  #     - key: SYNC_YEARS
  #       value: "2025,2026,2027"
  #     - key: FORCE_UPDATE
  #       value: "false"
